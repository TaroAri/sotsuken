export { questionData };

//問題文
//正解の選択肢　=>　option1

const questionData = [
  //section1
  {
    section: 1,
    question: 'CSS設計とは何ですか？',
    option1: 'CSSを効率的かつ効果的に管理・運用するためのルールや手法',
    option2: 'CSSを使ってウェブページのレイアウトを一度だけ作成する方法',
    option3: 'CSSコードを手動で書くための基本的なルール',
    option4: 'CSSを最適化して、ファイルサイズを小さくする方法',
    option5: 'CSSを自動生成するツールの使用方法',
    explain: 'CSS設計とは「CSSを効率的かつ効果的に管理・運用するためのルールや手法」を指します。簡単にまとめると、CSSを簡単に、わかりやすくするルールのようなものです。',
  },
  {
    section: 1,
    question: '「誰が見てもそれがどのようなものなのかわかりやすくする」は「よいCSS設計の４つのポイント」の内どれに当てはまりますか？',
    option1: '予測できる',
    option2: '再利用できる',
    option3: '保守できる',
    option4: '拡張できる',
    option5: '活用できる',
    explain: '「誰が見てもそれがどのようなものなのかわかりやすくする」は “予測できる” に該当します。”予測できる” コードにすることで、CSSの複雑さが緩和し、開発の効率の向上につながります。',
  },
  {
    section: 1,
    question: '「スタイルなどの指定を繰り返し使えるようにする」は「よいCSS設計の４つのポイント」の内どれに当てはまりますか？',
    option1: '再利用できる',
    option2: '予測できる',
    option3: '保守できる',
    option4: '拡張できる',
    option5: '活用できる',
    explain: '「スタイルなどの指定を繰り返し使えるようにする」は ”再利用できる” に該当します。”再利用できる” コードにすることで、開発の効率化やメンテナンス性の向上につながります。',
  },
  {
    section: 1,
    question: '「機能の追加や更新をしても既存のものが崩れないように設計する」は「よいCSS設計の４つのポイント」の内どれに当てはまりますか？',
    option1: '保守できる',
    option2: '予測できる',
    option3: '再利用できる',
    option4: '拡張できる',
    option5: '活用できる',
    explain: '「機能の追加や更新をしても既存のものが崩れないように設計する」は ”保守できる” に該当します。”保守できる” コードにすることで、変更や拡張が簡単になります。',
  },
  {
    section: 1,
    question: '「ルールがわかりやすく、１人であろうと複数人であろうと問題なく管理できるように設計する」は「よいCSS設計の４つのポイント」の内どれに当てはまりますか？',
    option1: '拡張できる',
    option2: '予測できる',
    option3: '再利用できる',
    option4: '保守できる',
    option5: '活用できる',
    explain: '「良いCSS設計の４つのポイント」は「予測できる」、「再利用できる」、「保守できる」、「拡張できる」になります。ですので、これらに当てはまらない「活用できる」が正しくないものとなります。',
  },

  //section2
  {
    section: 2,
    question: 'BEMとはどのような設計手法ですか？',
    option1: 'webページを小さな部品（コンポーネント）に分割して作る方法',
    option2: 'CSSのプロパティ名を標準化する方法',
    option3: 'JavaScriptのコードを管理する方法',
    option4: 'CSSのアニメーションを効率化する方法',
    option5: 'webページのパフォーマンスを向上させる方法',
    explain: 'BEMとは、「webページを小さな部品（コンポーネント）に分割して作る方法」を指します。これにより、コードが再利用でき、開発の効率が上がります。',
  },
  {
    section: 2,
    question: 'BEMを構成する３つの要素として「Block」、「Element」とあと１つは何ですか？',
    option1: 'Modifier',
    option2: 'Method',
    option3: 'Mark',
    option4: 'Model',
    option5: 'Module',
    explain: 'BEMを構成する要素は「Block」、「Element」、「Modifier」の３つです。３つの要素に分割することにより、より柔軟にわかりやすく開発を進めることが出来ます。',
  },
  {
    section: 2,
    question: '「Block」、「Element」、「Modifier」、の３つをまとめて何と言いますか？',
    option1: 'BEMエンティティ',
    option2: 'BEMクラス',
    option3: 'BEMプロパティ',
    option4: 'BEMスタイル',
    option5: 'BEMタグ',
    explain: 'BEMを構成する３つの要素をまとめて「BEMエンティティ」と呼びます。BEMでは３要素それぞれがエンティティ（独立した要素）として扱われているため、このように呼びます。',
  },
  {
    section: 2,
    question: 'BEMにおいて、使用が推奨されているセレクターはどれですか？',
    option1: 'クラスセレクター（class）',
    option2: 'IDセレクター（id）',
    option3: 'グローバルセレクター（*）',
    option4: 'タグセレクター（div,h1,pなど）',
    option5: '子孫セレクター',
    explain: 'BEMにおいて、使用が推奨されているセレクターはクラスセレクターです。クラスセレクターに統一することで、セレクターの優先順位をなるべく均一に保ち、更新や改善が容易になります。',
  },
  {
    section: 2,
    question: 'BEMにおいて、なぜクラスセレクターの使用が推奨されているのでしょうか？',
    option1: 'セレクターの優先順位をなるべく均一に保つことで更新や改修しやすくするため。',
    option2: 'セレクターを細かく指定することで、ブラウザのレンダリング速度を向上させるため。',
    option3: 'クラスセレクターを使用することで、スタイルの優先度が常に最高になるため。',
    option4: 'クラスセレクターを使用すると、ページの読み込み時間が短縮されるため。',
    option5: 'セレクターの種類を複雑にすることで、CSSの管理が簡単になるため。',
    explain: 'BEMでクラスの命名を行う際は、半角英数字の小文字を使用し、複数の単語を含む場合はハイフンでつなぎます。ですので、すべて小文字でハイフンでつないでいる「search-form」が正解です。',
  },

  //section3
  {
    section: 3,
    question: 'Blockとは何ですか？',
    option1: '特定の場所や他のパーツと結びつかない、どこでも使い回せるパーツ',
    option2: '特定の場所にだけ使われる、レイアウトや位置を決めるパーツ',
    option3: '他のパーツに依存している、スタイルや機能を持たないパーツ',
    option4: '見た目に関するスタイルを担当するパーツ',
    option5: '複数のElementをまとめた、特定のページにのみ使用されるパーツ',
    explain: 'Blockとは、「特定の場所や他のパーツと結びつかない、どこでも使い回せるパーツ」のことを指します。これにより ”再利用できる” コードになります。',
  },
  {
    section: 3,
    question: 'Blockに対してしてはいけないスタリングは何ですか？',
    option1: 'positionやmarginなど位置に関するスタイル',
    option2: 'font-sizeやcolorなどの文字に関するスタイル',
    option3: 'background-colorやborderなどの視覚的なスタイル',
    option4: 'displayやflexなどのレイアウトに関するスタイル',
    option5: 'text-alignやline-heightなどのテキストに関するスタイル',
    explain: 'Blockに対しては、「positionやmarginなどの位置に関するスタイル」を指定してはいけません。これをしてしまうと使いまわした部分にも影響が出てしまい、”再利用性” が損なわれてしまいます。 ',
  },
  {
    section: 3,
    question: 'Blockの命名において、「それが何なのかを表す」とはどういう事ですか？',
    option1: '理由や役割を表すこと',
    option2: '色や形を表すこと',
    option3: '位置関係や配置を表すこと',
    option4: '機能の状態や動作を表すこと',
    option5: 'アニメーションの効果を表すこと',
    explain: 'Blockの命名において、「それが何なのかを表す」とは理由や役割を表すことを指しています。その要素の理由や役割を明確にすることで、可読性が高まり、”予測できる”  コードになります。',
  },
  {
    section: 3,
    question: 'h1タグの文字だけのBlockにおいて適切ではないクラス名はどれですか？',
    option1: 'large-text',
    option2: 'headline',
    option3: 'head',
    option4: 'heading',
    option5: 'title',
    explain: 'Blockの命名において、「それが何かを表す」ことが重要です。ですので、見た目を表している「large-text」が適切ではないクラス名となります。',
  },
  {
    section: 3,
    question: 'Blockの名前として適しているものはどれですか？',
    option1: 'search-form',
    option2: 'blue-button',
    option3: 'header-container',
    option4: 'active-search-form',
    option5: 'login-form-background',
    explain: 'Blockのクラスの命名を行う際は、半角英数字の小文字を使用し、複数の単語を含む場合はハイフンでつなぐとともに、その要素が何なのかを表します。ですので、「search-form」が正解となります。',
  },

  //section4
  {
    section: 4,
    question: 'Elementとは何ですか？',
    option1: 'Blockの中でしか使えないBlockのパーツ',
    option2: 'ページ全体で使用されるスタイルを持つ要素',
    option3: 'HTMLタグを意味するもので、Blockと異なる意味を持つ',
    option4: '外部のスタイルシートで定義されたクラス名',
    option5: '独立して使用されるコンポーネントで、Blockとは無関係な要素',
    explain: 'Elementとは、「Blockの中でしか使えないBlockのパーツ」のことを指します。Elementにより、Block内の構造が整理されより ”予測できる” コードになります。',
  },
  {
    section: 4,
    question: 'Elementのクラスの命名として正しいものはどれですか？',
    option1: 'search-form__input',
    option2: 'search-form-input',
    option3: '__input',
    option4: 'search-form__search-form__input',
    option5: 'input_search-form',
    explain: 'Elementのクラス命名を行う際は、Blockの名前の後にアンダースバーを２つ付け、後ろにElementの名前を付けます。ですので、「search-form__input」が正解となります。',
  },
  {
    section: 4,
    question: 'Elementの命名規則の説明として正しいものはどれですか？',
    option1: 'Blockの名前の後にアンダースコアを２つ付け、後ろにElementの名前を付ける',
    option2: 'Blockの名前の前にアンダースコアを２つ付け、後ろにElementの名前を付ける',
    option3: 'BlockとElementの名前をハイフンで繋げる',
    option4: 'Elementの名前をBlock名の後ろにスペースを入れて書く',
    option5: 'Block名とElement名の間にコロンを使って繋げる',
    explain: 'Elementのクラス命名を行う際は、Blockの名前の後にアンダーバーを２つ付け、後ろにElementの名前を付けます。これにより、要素の構造が明確になり、”予測できる” コードになります。',
  },
  {
    section: 4,
    question: '<form class="search-form">\n　　<div class="search-form__content">\n　　　　<button class="＊＊＊__button">Search</button>\n　　</div>\n</form>\n\nこのコードの「＊＊＊」の部分に当てはまるのもとして正しいものはどれですか？',
    option1: 'search-form',
    option2: 'search-form__content',
    option3: 'search-form_content',
    option4: 'search__form',
    option5: 'searchForm',
    explain: 'このコードでは、「search-form」というBlockの中に、「search-form__content」というElementがあり、その中に「＊＊＊__button」(以下⓵)があります。⓵にはハイフンが２つあることからこれがElementであると予想ができます。また、Elementの中にElementが入る命名は推奨されていないため、「＊＊＊」にはBlock名のみが入ると考えられます。ですので、「search-form」が正解となります。',
  },
  {
    section: 4,
    question: 'Elementにおいて当てはまるものはどれですか？',
    option1: ' Elememtが別のElementの中に入るような命名は推奨されていない',
    option2: 'Elementはクラス名にアンダースコアを１つ入れる',
    option3: 'ElementはBlock名と一緒に使わなければならない',
    option4: 'Elementは同じBlock内に複数存在してはいけない',
    option5: 'Elementはレイアウトに関するスタイルを持つべきだ',
    explain: 'Elementでは、Elememtが別のElementの中に入るような命名は推奨されていません。これをしてしまうと、中のElementが外のElementに依存してしまい、”再利用性”が損なわれてしまいます。',
  },

  //section5
  {
    section: 5,
    question: 'Modifierとは何ですか？',
    option1: 'BlockやElementの見た目や、状態、動きを表すもの',
    option2: 'BlockやElementの構造を表すもの',
    option3: 'BlockやElementを変更するための親要素を表すもの',
    option4: 'CSSのスタイル全般を管理するもの',
    option5: 'BlockやElementの名前を変更するもの',
    explain: 'Modifierとは、「BlockやElementの見た目や、状態、動きを表すもの」のことを指します。これにより、異なるスタイルを簡単に適用できるとともに、要素の状態も管理することができます。',
  },
  {
    section: 5,
    question: 'Modifierでは、BlockやElementが「それが何なのか」を重視しているのに対し、何をを重視していますか？',
    option1: 'それがどうであるか',
    option2: 'それが何であるか',
    option3: 'その外観のみ',
    option4: 'ブロックの入れ子関係',
    option5: 'Elementの構造',
    explain: 'Modifierでは、「それがどうであるか」を重視しています。これは要素の見た目や状態、動きに関するスタイルを指定することを意味します。',
  },
  {
    section: 5,
    question: 'Modifierの２つのタイプの内の１つであるキーと値のペアとして正しいものはどれですか？',
    option1: 'position_bottom_right',
    option2: 'position-bottom-right',
    option3: 'position__bottom_right',
    option4: 'position-bottom_right',
    option5: 'position-bottom__right',
    explain: 'Modifierのキーと値のペアでは、キーと値を「 _ 」(アンダーバー)で区切り、その前にBlock(またはElement)名と「 _ 」を１つ加えます。ですので、「position_button_right」が正解となります。',
  },
  {
    section: 5,
    question: 'Modifierについて当てはまるものはどれですか？',
    option1: 'Modifierは１つのBlockやElementに複数つけることができる',
    option2: 'Modifierは1つのBlockやElementに1つしかつけることができない',
    option3: 'ModifierはBlockやElementごとに異なる名前を付ける必要がある',
    option4: 'ModifierはBlockやElementの見た目を完全に変更しなければならない',
    option5: 'ModifierはBlockやElementの名前を変更するために使用される',
    explain: 'Modifierは１つのBlockやElementに複数つけることができます。そうすることで、コードが見やすくなるだけではなく、スタイルの細かい調整もすることができます。',
  },
  {
    section: 5,
    question: 'Modifierのクラスの命名として正しいものはどれですか？',
    option1: 'search-form_button_large',
    option2: 'search-form_button-large',
    option3: 'search-form__button_large',
    option4: 'search-form-button_large',
    option5: 'search-form__button-large',
    explain: 'Modifierのクラス命名を行う際は、Block、Elementの名前の後にアンダーバーを１つ付け、後ろにModifierの名前を付けます。ですので、「search-form_button_large」が正解となります。',
  },

  //section6
  {
    section: 6,
    question: 'Mixとは何ですか？',
    option1: '１つの要素に役割の違う複数のクラスを組み合わせて使う方法',
    option2: 'CSSで特定の要素に色を一度だけ指定する方法',
    option3: 'JavaScriptの関数を一度だけ呼び出す方法',
    option4: '同じクラスを異なる要素に何度も適用する方法',
    option5: 'CSSのセレクタで特定の要素を選択する方法',
    explain: 'Mixとは、「１つの要素に役割の違う複数のクラスを組み合わせて使う方法」のことを指します。これによりコードの繰り返しが減り、”再利用できる” コードになります。',
  },
  {
    section: 6,
    question: 'Mixは基本的にどのような場面で使用されますか？',
    option1: '他の要素との位置関係を調整するとき',
    option2: '要素に色を設定するとき',
    option3: 'ページの読み込み速度を向上させるために使用される',
    option4: 'CSSの変数を定義するとき',
    option5: 'JavaScriptでイベントリスナーを設定するとき',
    explain: 'Mixは基本的に「他の要素との位置関係を調整するとき」に使用されます。特に位置関係の指定は単体のBlockやElementにしてしまうとコードの再利用性が損なわれてしまうので注意が必要です。',
  },
  {
    section: 6,
    question: 'Mixを使う利点として正しいものはどれですか？',
    option1: '位置関係のスタイルと見た目のスタイルを分けて管理することができ、より「再利用性」の高いコードになる',
    option2: 'すべてのスタイルを1つのクラスで管理できるようになる',
    option3: 'クラスを使わずにHTMLタグだけでスタイルを適用できるようになる',
    option4: 'ページの読み込み速度が速くなる',
    option5: 'タイルの一貫性がなくなり、異なる要素に異なるスタイルを適用することができる',
    explain: 'Mixを使う利点は、「位置関係のスタイルと見た目のスタイルを分けて管理できる」点にあります。これにより、”再利用できる” コードになります。',
  },
  {
    section: 6,
    question: 'Mixはあるものの代わりとして使用することができます。それは何ですか？',
    option1: 'グループセレクター',
    option2: '個別のIDセレクター',
    option3: 'インラインスタイル',
    option4: '擬似クラス',
    option5: 'テーマのモディファイア',
    explain: 'Miⅹは基本的にほかの要素との位置関係を調整するときに使用されますが、それ以外にも「グループセレクター」の代わりとしても使用することができます。そのようにすることで、変更があるときにほかの部分に影響が出ずらくなります。',
  },
  {
    section: 6,
    question: '<div class=”header”>\n　　<div class=”menu header__menu”>\n　　　　メニュー\n　　</div>\n</div>\n\n上記のコードの場合、header__menuにはどのような指定をしますか？',
    option1: 'header内のmenuだけに指定したいスタイルを指定する',
    option2: 'menuクラスにのみ指定したいスタイルを指定する',
    option3: 'header内のすべての要素に指定したいスタイルを指定する',
    option4: 'headerブロック全体に指定したいスタイルを指定する',
    option5: 'menuとheader__menuの両方に同じスタイルを指定する',
    explain: 'Block(またはElement)とElementの組み合わせは基本的に「header内のmenuだけに指定したいスタイルを指定」します。このようにすることで、位置関係のスタイルと見た目のスタイルを分けて管理することができます。',
  }
];